
# Code Generated by Sidekick is for learning and experimentation purposes only.
import os
import re
from langchain.prompts import PromptTemplate
from app.core.config import llm
from app.models.frontend_state import FrontendState


def generate_documentation(state: FrontendState)->FrontendState:
    # ðŸ“Œ LLM Prompt for README.md
    readme_prompt = PromptTemplate.from_template(
        """
        Generate a professional README.md for an Angular project.
        Include sections: Overview, Setup, Usage, Project Structure.

        - Components: {components}
        - Services: {services}

        Only provide the output as content of README.md.
        """
    )

    readme_content = llm.invoke(
        readme_prompt.format(components=list(state.component_code.keys()), 
                             services=list(state.service_code.keys()))
    )

    print(readme_content)

    # ðŸ“Œ LLM Prompt for Component Documentation
    component_prompt = PromptTemplate.from_template(
        """
        Generate detailed documentation for the following Angular components:
        {components}
        Include props, state management, and API integration details.

        Only provide the output in Markdown format.
        """
    )

    component_docs = llm.invoke(
        component_prompt.format(components=list(state.component_code.keys()))
    )

    print(component_docs)

    # ðŸ“Œ LLM Prompt for Dockerfile
    docker_prompt = PromptTemplate.from_template(
        """
        Generate a Dockerfile for an Angular application.
        Assume it's built using Angular CLI.
        The Dockerfile should:
        - Use an appropriate base image
        - Install dependencies
        - Build and serve the app
        - Expose necessary ports

        Only provide the output as content of Dockerfile.

        """
    )

    docker_content = llm.invoke(docker_prompt.format())
    
    # Strip the Dockerfile content using re module
    docker_content_stripped = re.sub(r'```Dockerfile\n|```', '', docker_content.content).strip()

    print(docker_content_stripped)

    # ðŸ”¹ Store in state
    # state.documentation["README.md"] = readme_content
    # state.documentation["Component_Docs.md"] = component_docs
    # state.documentation["Dockerfile"] = docker_content

    # ðŸ”¹ Write files to project directory
    project_root = "GeneratedAngularApp"
    os.makedirs(project_root, exist_ok=True)

    with open(os.path.join(project_root, "README.md"), "w", encoding="utf-8") as f:
        f.write(readme_content.content)

    with open(os.path.join(project_root, "Component_Docs.md"), "w", encoding="utf-8") as f:
        f.write(component_docs.content)

    with open(os.path.join(project_root, "Dockerfile"), "w", encoding="utf-8") as f:
        f.write(docker_content_stripped)

    return state



